import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting RBAC seed data...');

  // 1. Create System Actions
  console.log('Creating system actions...');
  const actions = await Promise.all([
    // User Management Actions
    prisma.action.upsert({
      where: { code: 'USER_CREATE' },
      update: {},
      create: {
        name: 'T·∫°o ng∆∞·ªùi d√πng',
        code: 'USER_CREATE',
        description: 'Quy·ªÅn t·∫°o ng∆∞·ªùi d√πng m·ªõi',
      },
    }),
    prisma.action.upsert({
      where: { code: 'USER_READ' },
      update: {},
      create: {
        name: 'Xem ng∆∞·ªùi d√πng',
        code: 'USER_READ',
        description: 'Quy·ªÅn xem th√¥ng tin ng∆∞·ªùi d√πng',
      },
    }),
    prisma.action.upsert({
      where: { code: 'USER_UPDATE' },
      update: {},
      create: {
        name: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng',
        code: 'USER_UPDATE',
        description: 'Quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng',
      },
    }),
    prisma.action.upsert({
      where: { code: 'USER_DELETE' },
      update: {},
      create: {
        name: 'X√≥a ng∆∞·ªùi d√πng',
        code: 'USER_DELETE',
        description: 'Quy·ªÅn x√≥a ng∆∞·ªùi d√πng',
      },
    }),

    // Role Management Actions
    prisma.action.upsert({
      where: { code: 'ROLE_CREATE' },
      update: {},
      create: {
        name: 'T·∫°o vai tr√≤',
        code: 'ROLE_CREATE',
        description: 'Quy·ªÅn t·∫°o vai tr√≤ m·ªõi',
      },
    }),
    prisma.action.upsert({
      where: { code: 'ROLE_READ' },
      update: {},
      create: {
        name: 'Xem vai tr√≤',
        code: 'ROLE_READ',
        description: 'Quy·ªÅn xem th√¥ng tin vai tr√≤',
      },
    }),
    prisma.action.upsert({
      where: { code: 'ROLE_UPDATE' },
      update: {},
      create: {
        name: 'C·∫≠p nh·∫≠t vai tr√≤',
        code: 'ROLE_UPDATE',
        description: 'Quy·ªÅn c·∫≠p nh·∫≠t vai tr√≤',
      },
    }),
    prisma.action.upsert({
      where: { code: 'ROLE_DELETE' },
      update: {},
      create: {
        name: 'X√≥a vai tr√≤',
        code: 'ROLE_DELETE',
        description: 'Quy·ªÅn x√≥a vai tr√≤',
      },
    }),

    // Permission Management Actions
    prisma.action.upsert({
      where: { code: 'PERMISSION_CREATE' },
      update: {},
      create: {
        name: 'T·∫°o quy·ªÅn',
        code: 'PERMISSION_CREATE',
        description: 'Quy·ªÅn t·∫°o quy·ªÅn h·∫°n m·ªõi',
      },
    }),
    prisma.action.upsert({
      where: { code: 'PERMISSION_READ' },
      update: {},
      create: {
        name: 'Xem quy·ªÅn',
        code: 'PERMISSION_READ',
        description: 'Quy·ªÅn xem th√¥ng tin quy·ªÅn h·∫°n',
      },
    }),
    prisma.action.upsert({
      where: { code: 'PERMISSION_UPDATE' },
      update: {},
      create: {
        name: 'C·∫≠p nh·∫≠t quy·ªÅn',
        code: 'PERMISSION_UPDATE',
        description: 'Quy·ªÅn c·∫≠p nh·∫≠t quy·ªÅn h·∫°n',
      },
    }),
    prisma.action.upsert({
      where: { code: 'PERMISSION_DELETE' },
      update: {},
      create: {
        name: 'X√≥a quy·ªÅn',
        code: 'PERMISSION_DELETE',
        description: 'Quy·ªÅn x√≥a quy·ªÅn h·∫°n',
      },
    }),

    // Action Management Actions
    prisma.action.upsert({
      where: { code: 'ACTION_CREATE' },
      update: {},
      create: {
        name: 'T·∫°o h√†nh ƒë·ªông',
        code: 'ACTION_CREATE',
        description: 'Quy·ªÅn t·∫°o h√†nh ƒë·ªông m·ªõi',
      },
    }),
    prisma.action.upsert({
      where: { code: 'ACTION_READ' },
      update: {},
      create: {
        name: 'Xem h√†nh ƒë·ªông',
        code: 'ACTION_READ',
        description: 'Quy·ªÅn xem th√¥ng tin h√†nh ƒë·ªông',
      },
    }),
    prisma.action.upsert({
      where: { code: 'ACTION_UPDATE' },
      update: {},
      create: {
        name: 'C·∫≠p nh·∫≠t h√†nh ƒë·ªông',
        code: 'ACTION_UPDATE',
        description: 'Quy·ªÅn c·∫≠p nh·∫≠t h√†nh ƒë·ªông',
      },
    }),
    prisma.action.upsert({
      where: { code: 'ACTION_DELETE' },
      update: {},
      create: {
        name: 'X√≥a h√†nh ƒë·ªông',
        code: 'ACTION_DELETE',
        description: 'Quy·ªÅn x√≥a h√†nh ƒë·ªông',
      },
    }),

    // Document Management Actions
    prisma.action.upsert({
      where: { code: 'DOCUMENT_CREATE' },
      update: {},
      create: {
        name: 'T·∫°o t√†i li·ªáu',
        code: 'DOCUMENT_CREATE',
        description: 'Quy·ªÅn t·∫°o t√†i li·ªáu MOU/Agreement',
      },
    }),
    prisma.action.upsert({
      where: { code: 'DOCUMENT_READ' },
      update: {},
      create: {
        name: 'Xem t√†i li·ªáu',
        code: 'DOCUMENT_READ',
        description: 'Quy·ªÅn xem t√†i li·ªáu MOU/Agreement',
      },
    }),
    prisma.action.upsert({
      where: { code: 'DOCUMENT_UPDATE' },
      update: {},
      create: {
        name: 'C·∫≠p nh·∫≠t t√†i li·ªáu',
        code: 'DOCUMENT_UPDATE',
        description: 'Quy·ªÅn c·∫≠p nh·∫≠t t√†i li·ªáu MOU/Agreement',
      },
    }),
    prisma.action.upsert({
      where: { code: 'DOCUMENT_DELETE' },
      update: {},
      create: {
        name: 'X√≥a t√†i li·ªáu',
        code: 'DOCUMENT_DELETE',
        description: 'Quy·ªÅn x√≥a t√†i li·ªáu MOU/Agreement',
      },
    }),
    prisma.action.upsert({
      where: { code: 'DOCUMENT_APPROVE' },
      update: {},
      create: {
        name: 'Ph√™ duy·ªát t√†i li·ªáu',
        code: 'DOCUMENT_APPROVE',
        description: 'Quy·ªÅn ph√™ duy·ªát t√†i li·ªáu MOU/Agreement',
      },
    }),

    // Visa Management Actions
    prisma.action.upsert({
      where: { code: 'VISA_CREATE' },
      update: {},
      create: {
        name: 'T·∫°o h·ªì s∆° visa',
        code: 'VISA_CREATE',
        description: 'Quy·ªÅn t·∫°o h·ªì s∆° visa',
      },
    }),
    prisma.action.upsert({
      where: { code: 'VISA_READ' },
      update: {},
      create: {
        name: 'Xem h·ªì s∆° visa',
        code: 'VISA_READ',
        description: 'Quy·ªÅn xem h·ªì s∆° visa',
      },
    }),
    prisma.action.upsert({
      where: { code: 'VISA_UPDATE' },
      update: {},
      create: {
        name: 'C·∫≠p nh·∫≠t h·ªì s∆° visa',
        code: 'VISA_UPDATE',
        description: 'Quy·ªÅn c·∫≠p nh·∫≠t h·ªì s∆° visa',
      },
    }),
    prisma.action.upsert({
      where: { code: 'VISA_DELETE' },
      update: {},
      create: {
        name: 'X√≥a h·ªì s∆° visa',
        code: 'VISA_DELETE',
        description: 'Quy·ªÅn x√≥a h·ªì s∆° visa',
      },
    }),
    prisma.action.upsert({
      where: { code: 'VISA_APPROVE' },
      update: {},
      create: {
        name: 'Ph√™ duy·ªát visa',
        code: 'VISA_APPROVE',
        description: 'Quy·ªÅn ph√™ duy·ªát h·ªì s∆° visa',
      },
    }),

    // Guest Management Actions
    prisma.action.upsert({
      where: { code: 'GUEST_CREATE' },
      update: {},
      create: {
        name: 'T·∫°o ƒë∆°n ƒëƒÉng k√Ω kh√°ch',
        code: 'GUEST_CREATE',
        description: 'Quy·ªÅn t·∫°o ƒë∆°n ƒëƒÉng k√Ω kh√°ch qu·ªëc t·∫ø',
      },
    }),
    prisma.action.upsert({
      where: { code: 'GUEST_READ' },
      update: {},
      create: {
        name: 'Xem ƒë∆°n ƒëƒÉng k√Ω kh√°ch',
        code: 'GUEST_READ',
        description: 'Quy·ªÅn xem ƒë∆°n ƒëƒÉng k√Ω kh√°ch qu·ªëc t·∫ø',
      },
    }),
    prisma.action.upsert({
      where: { code: 'GUEST_UPDATE' },
      update: {},
      create: {
        name: 'C·∫≠p nh·∫≠t ƒë∆°n ƒëƒÉng k√Ω kh√°ch',
        code: 'GUEST_UPDATE',
        description: 'Quy·ªÅn c·∫≠p nh·∫≠t ƒë∆°n ƒëƒÉng k√Ω kh√°ch qu·ªëc t·∫ø',
      },
    }),
    prisma.action.upsert({
      where: { code: 'GUEST_DELETE' },
      update: {},
      create: {
        name: 'X√≥a ƒë∆°n ƒëƒÉng k√Ω kh√°ch',
        code: 'GUEST_DELETE',
        description: 'Quy·ªÅn x√≥a ƒë∆°n ƒëƒÉng k√Ω kh√°ch qu·ªëc t·∫ø',
      },
    }),
    prisma.action.upsert({
      where: { code: 'GUEST_APPROVE' },
      update: {},
      create: {
        name: 'Ph√™ duy·ªát ƒëƒÉng k√Ω kh√°ch',
        code: 'GUEST_APPROVE',
        description: 'Quy·ªÅn ph√™ duy·ªát ƒëƒÉng k√Ω kh√°ch qu·ªëc t·∫ø',
      },
    }),

    // Translation Management Actions
    prisma.action.upsert({
      where: { code: 'TRANSLATION_CREATE' },
      update: {},
      create: {
        name: 'T·∫°o y√™u c·∫ßu d·ªãch thu·∫≠t',
        code: 'TRANSLATION_CREATE',
        description: 'Quy·ªÅn t·∫°o y√™u c·∫ßu d·ªãch thu·∫≠t v√† ch·ª©ng nh·∫≠n',
      },
    }),
    prisma.action.upsert({
      where: { code: 'TRANSLATION_READ' },
      update: {},
      create: {
        name: 'Xem y√™u c·∫ßu d·ªãch thu·∫≠t',
        code: 'TRANSLATION_READ',
        description: 'Quy·ªÅn xem y√™u c·∫ßu d·ªãch thu·∫≠t v√† ch·ª©ng nh·∫≠n',
      },
    }),
    prisma.action.upsert({
      where: { code: 'TRANSLATION_UPDATE' },
      update: {},
      create: {
        name: 'C·∫≠p nh·∫≠t y√™u c·∫ßu d·ªãch thu·∫≠t',
        code: 'TRANSLATION_UPDATE',
        description: 'Quy·ªÅn c·∫≠p nh·∫≠t y√™u c·∫ßu d·ªãch thu·∫≠t v√† ch·ª©ng nh·∫≠n',
      },
    }),
    prisma.action.upsert({
      where: { code: 'TRANSLATION_DELETE' },
      update: {},
      create: {
        name: 'X√≥a y√™u c·∫ßu d·ªãch thu·∫≠t',
        code: 'TRANSLATION_DELETE',
        description: 'Quy·ªÅn x√≥a y√™u c·∫ßu d·ªãch thu·∫≠t v√† ch·ª©ng nh·∫≠n',
      },
    }),
    prisma.action.upsert({
      where: { code: 'TRANSLATION_APPROVE' },
      update: {},
      create: {
        name: 'Ph√™ duy·ªát y√™u c·∫ßu d·ªãch thu·∫≠t',
        code: 'TRANSLATION_APPROVE',
        description: 'Quy·ªÅn ph√™ duy·ªát y√™u c·∫ßu d·ªãch thu·∫≠t v√† ch·ª©ng nh·∫≠n',
      },
    }),

    // System Actions
    prisma.action.upsert({
      where: { code: 'SYSTEM_CONFIG_READ' },
      update: {},
      create: {
        name: 'Xem c·∫•u h√¨nh h·ªá th·ªëng',
        code: 'SYSTEM_CONFIG_READ',
        description: 'Quy·ªÅn xem c·∫•u h√¨nh h·ªá th·ªëng',
      },
    }),
    prisma.action.upsert({
      where: { code: 'SYSTEM_CONFIG_UPDATE' },
      update: {},
      create: {
        name: 'C·∫≠p nh·∫≠t c·∫•u h√¨nh h·ªá th·ªëng',
        code: 'SYSTEM_CONFIG_UPDATE',
        description: 'Quy·ªÅn c·∫≠p nh·∫≠t c·∫•u h√¨nh h·ªá th·ªëng',
      },
    }),
    prisma.action.upsert({
      where: { code: 'REPORT_GENERATE' },
      update: {},
      create: {
        name: 'T·∫°o b√°o c√°o',
        code: 'REPORT_GENERATE',
        description: 'Quy·ªÅn t·∫°o v√† xu·∫•t b√°o c√°o',
      },
    }),
    prisma.action.upsert({
      where: { code: 'ANALYTICS_VIEW' },
      update: {},
      create: {
        name: 'Xem ph√¢n t√≠ch',
        code: 'ANALYTICS_VIEW',
        description: 'Quy·ªÅn xem dashboard v√† ph√¢n t√≠ch d·ªØ li·ªáu',
      },
    }),
  ]);

  console.log(`‚úÖ Created ${actions.length} actions`);

  // 2. Create System Permissions
  console.log('Creating system permissions...');
  const permissions = await Promise.all([
    prisma.permission.upsert({
      where: { code: 'USER_MANAGEMENT' },
      update: {},
      create: {
        name: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng',
        code: 'USER_MANAGEMENT',
        description: 'Quy·ªÅn qu·∫£n l√Ω ng∆∞·ªùi d√πng h·ªá th·ªëng',
      },
    }),
    prisma.permission.upsert({
      where: { code: 'RBAC_MANAGEMENT' },
      update: {},
      create: {
        name: 'Qu·∫£n l√Ω ph√¢n quy·ªÅn',
        code: 'RBAC_MANAGEMENT',
        description: 'Quy·ªÅn qu·∫£n l√Ω vai tr√≤, quy·ªÅn h·∫°n v√† ph√¢n quy·ªÅn',
      },
    }),
    prisma.permission.upsert({
      where: { code: 'DOCUMENT_MANAGEMENT' },
      update: {},
      create: {
        name: 'Qu·∫£n l√Ω t√†i li·ªáu MOU',
        code: 'DOCUMENT_MANAGEMENT',
        description: 'Quy·ªÅn qu·∫£n l√Ω t√†i li·ªáu MOU/Agreement',
      },
    }),
    prisma.permission.upsert({
      where: { code: 'VISA_MANAGEMENT' },
      update: {},
      create: {
        name: 'Qu·∫£n l√Ω visa',
        code: 'VISA_MANAGEMENT',
        description: 'Quy·ªÅn qu·∫£n l√Ω h·ªì s∆° visa v√† gia h·∫°n',
      },
    }),
    prisma.permission.upsert({
      where: { code: 'GUEST_MANAGEMENT' },
      update: {},
      create: {
        name: 'Qu·∫£n l√Ω kh√°ch qu·ªëc t·∫ø',
        code: 'GUEST_MANAGEMENT',
        description: 'Quy·ªÅn qu·∫£n l√Ω ƒëƒÉng k√Ω kh√°ch qu·ªëc t·∫ø',
      },
    }),
    prisma.permission.upsert({
      where: { code: 'TRANSLATION_MANAGEMENT' },
      update: {},
      create: {
        name: 'Qu·∫£n l√Ω d·ªãch thu·∫≠t',
        code: 'TRANSLATION_MANAGEMENT',
        description: 'Quy·ªÅn qu·∫£n l√Ω y√™u c·∫ßu d·ªãch thu·∫≠t v√† ch·ª©ng nh·∫≠n',
      },
    }),
    prisma.permission.upsert({
      where: { code: 'SYSTEM_MANAGEMENT' },
      update: {},
      create: {
        name: 'Qu·∫£n l√Ω h·ªá th·ªëng',
        code: 'SYSTEM_MANAGEMENT',
        description: 'Quy·ªÅn qu·∫£n l√Ω c·∫•u h√¨nh v√† v·∫≠n h√†nh h·ªá th·ªëng',
      },
    }),
  ]);

  console.log(`‚úÖ Created ${permissions.length} permissions`);

  // 3. Create System Roles
  console.log('Creating system roles...');
  const roles = await Promise.all([
    prisma.role.upsert({
      where: { code: 'SYSTEM_ADMIN' },
      update: {},
      create: {
        name: 'Qu·∫£n tr·ªã h·ªá th·ªëng',
        code: 'SYSTEM_ADMIN',
        description: 'Quy·ªÅn cao nh·∫•t trong h·ªá th·ªëng, qu·∫£n l√Ω to√†n b·ªô',
      },
    }),
    prisma.role.upsert({
      where: { code: 'ADMIN' },
      update: {},
      create: {
        name: 'Qu·∫£n tr·ªã vi√™n',
        code: 'ADMIN',
        description: 'Qu·∫£n tr·ªã vi√™n ph√≤ng H·ª£p t√°c qu·ªëc t·∫ø',
      },
    }),
    prisma.role.upsert({
      where: { code: 'MANAGER' },
      update: {},
      create: {
        name: 'Qu·∫£n l√Ω',
        code: 'MANAGER',
        description: 'Tr∆∞·ªüng/Ph√≥ ph√≤ng H·ª£p t√°c qu·ªëc t·∫ø',
      },
    }),
    prisma.role.upsert({
      where: { code: 'SPECIALIST' },
      update: {},
      create: {
        name: 'Chuy√™n vi√™n',
        code: 'SPECIALIST',
        description: 'Chuy√™n vi√™n ph√≤ng H·ª£p t√°c qu·ªëc t·∫ø',
      },
    }),
    prisma.role.upsert({
      where: { code: 'STAFF' },
      update: {},
      create: {
        name: 'Nh√¢n vi√™n',
        code: 'STAFF',
        description: 'Nh√¢n vi√™n ph√≤ng H·ª£p t√°c qu·ªëc t·∫ø',
      },
    }),
    prisma.role.upsert({
      where: { code: 'STUDENT' },
      update: {},
      create: {
        name: 'Sinh vi√™n',
        code: 'STUDENT',
        description: 'Sinh vi√™n c√≥ th·ªÉ xem m·ªôt s·ªë th√¥ng tin v√† t·∫°o y√™u c·∫ßu',
      },
    }),
    prisma.role.upsert({
      where: { code: 'VIEWER' },
      update: {},
      create: {
        name: 'Ng∆∞·ªùi xem',
        code: 'VIEWER',
        description: 'Ch·ªâ c√≥ quy·ªÅn xem th√¥ng tin c∆° b·∫£n',
      },
    }),
  ]);

  console.log(`‚úÖ Created ${roles.length} roles`);

  // 4. Assign Actions to Permissions
  console.log('Assigning actions to permissions...');
  
  // Get permission and action IDs
  const userMgmtPerm = await prisma.permission.findUnique({ where: { code: 'USER_MANAGEMENT' } });
  const rbacMgmtPerm = await prisma.permission.findUnique({ where: { code: 'RBAC_MANAGEMENT' } });
  const docMgmtPerm = await prisma.permission.findUnique({ where: { code: 'DOCUMENT_MANAGEMENT' } });
  const visaMgmtPerm = await prisma.permission.findUnique({ where: { code: 'VISA_MANAGEMENT' } });
  const guestMgmtPerm = await prisma.permission.findUnique({ where: { code: 'GUEST_MANAGEMENT' } });
  const translationMgmtPerm = await prisma.permission.findUnique({ where: { code: 'TRANSLATION_MANAGEMENT' } });
  const systemMgmtPerm = await prisma.permission.findUnique({ where: { code: 'SYSTEM_MANAGEMENT' } });

  // Assign user management actions
  const userActions = ['USER_CREATE', 'USER_READ', 'USER_UPDATE', 'USER_DELETE'];
  for (const actionCode of userActions) {
    const action = await prisma.action.findUnique({ where: { code: actionCode } });
    if (action && userMgmtPerm) {
      await prisma.permissionAction.upsert({
        where: {
          permissionId_actionId: {
            permissionId: userMgmtPerm.id,
            actionId: action.id,
          },
        },
        update: {},
        create: {
          permissionId: userMgmtPerm.id,
          actionId: action.id,
        },
      });
    }
  }

  // Assign RBAC management actions
  const rbacActions = [
    'ROLE_CREATE', 'ROLE_READ', 'ROLE_UPDATE', 'ROLE_DELETE',
    'PERMISSION_CREATE', 'PERMISSION_READ', 'PERMISSION_UPDATE', 'PERMISSION_DELETE',
    'ACTION_CREATE', 'ACTION_READ', 'ACTION_UPDATE', 'ACTION_DELETE'
  ];
  for (const actionCode of rbacActions) {
    const action = await prisma.action.findUnique({ where: { code: actionCode } });
    if (action && rbacMgmtPerm) {
      await prisma.permissionAction.upsert({
        where: {
          permissionId_actionId: {
            permissionId: rbacMgmtPerm.id,
            actionId: action.id,
          },
        },
        update: {},
        create: {
          permissionId: rbacMgmtPerm.id,
          actionId: action.id,
        },
      });
    }
  }

  // Assign document management actions
  const docActions = ['DOCUMENT_CREATE', 'DOCUMENT_READ', 'DOCUMENT_UPDATE', 'DOCUMENT_DELETE', 'DOCUMENT_APPROVE'];
  for (const actionCode of docActions) {
    const action = await prisma.action.findUnique({ where: { code: actionCode } });
    if (action && docMgmtPerm) {
      await prisma.permissionAction.upsert({
        where: {
          permissionId_actionId: {
            permissionId: docMgmtPerm.id,
            actionId: action.id,
          },
        },
        update: {},
        create: {
          permissionId: docMgmtPerm.id,
          actionId: action.id,
        },
      });
    }
  }

  // Assign visa management actions
  const visaActions = ['VISA_CREATE', 'VISA_READ', 'VISA_UPDATE', 'VISA_DELETE', 'VISA_APPROVE'];
  for (const actionCode of visaActions) {
    const action = await prisma.action.findUnique({ where: { code: actionCode } });
    if (action && visaMgmtPerm) {
      await prisma.permissionAction.upsert({
        where: {
          permissionId_actionId: {
            permissionId: visaMgmtPerm.id,
            actionId: action.id,
          },
        },
        update: {},
        create: {
          permissionId: visaMgmtPerm.id,
          actionId: action.id,
        },
      });
    }
  }

  // Assign guest management actions
  const guestActions = ['GUEST_CREATE', 'GUEST_READ', 'GUEST_UPDATE', 'GUEST_DELETE', 'GUEST_APPROVE'];
  for (const actionCode of guestActions) {
    const action = await prisma.action.findUnique({ where: { code: actionCode } });
    if (action && guestMgmtPerm) {
      await prisma.permissionAction.upsert({
        where: {
          permissionId_actionId: {
            permissionId: guestMgmtPerm.id,
            actionId: action.id,
          },
        },
        update: {},
        create: {
          permissionId: guestMgmtPerm.id,
          actionId: action.id,
        },
      });
    }
  }

  // Assign translation management actions
  const translationActions = ['TRANSLATION_CREATE', 'TRANSLATION_READ', 'TRANSLATION_UPDATE', 'TRANSLATION_DELETE', 'TRANSLATION_APPROVE'];
  for (const actionCode of translationActions) {
    const action = await prisma.action.findUnique({ where: { code: actionCode } });
    if (action && translationMgmtPerm) {
      await prisma.permissionAction.upsert({
        where: {
          permissionId_actionId: {
            permissionId: translationMgmtPerm.id,
            actionId: action.id,
          },
        },
        update: {},
        create: {
          permissionId: translationMgmtPerm.id,
          actionId: action.id,
        },
      });
    }
  }

  // Assign system management actions
  const systemActions = ['SYSTEM_CONFIG_READ', 'SYSTEM_CONFIG_UPDATE', 'REPORT_GENERATE', 'ANALYTICS_VIEW'];
  for (const actionCode of systemActions) {
    const action = await prisma.action.findUnique({ where: { code: actionCode } });
    if (action && systemMgmtPerm) {
      await prisma.permissionAction.upsert({
        where: {
          permissionId_actionId: {
            permissionId: systemMgmtPerm.id,
            actionId: action.id,
          },
        },
        update: {},
        create: {
          permissionId: systemMgmtPerm.id,
          actionId: action.id,
        },
      });
    }
  }

  console.log('‚úÖ Assigned actions to permissions');

  // 5. Assign Permissions to Roles
  console.log('Assigning permissions to roles...');

  // SYSTEM_ADMIN - All permissions
  const systemAdminRole = await prisma.role.findUnique({ where: { code: 'SYSTEM_ADMIN' } });
  if (systemAdminRole) {
    for (const permission of permissions) {
      await prisma.rolePermission.upsert({
        where: {
          roleId_permissionId: {
            roleId: systemAdminRole.id,
            permissionId: permission.id,
          },
        },
        update: {},
        create: {
          roleId: systemAdminRole.id,
          permissionId: permission.id,
        },
      });
    }
  }

  // ADMIN - All except RBAC_MANAGEMENT and SYSTEM_MANAGEMENT
  const adminRole = await prisma.role.findUnique({ where: { code: 'ADMIN' } });
  if (adminRole) {
    const adminPermissions = [
      'USER_MANAGEMENT',
      'DOCUMENT_MANAGEMENT',
      'VISA_MANAGEMENT', 
      'GUEST_MANAGEMENT',
      'TRANSLATION_MANAGEMENT'
    ];
    for (const permCode of adminPermissions) {
      const permission = await prisma.permission.findUnique({ where: { code: permCode } });
      if (permission) {
        await prisma.rolePermission.upsert({
          where: {
            roleId_permissionId: {
              roleId: adminRole.id,
              permissionId: permission.id,
            },
          },
          update: {},
          create: {
            roleId: adminRole.id,
            permissionId: permission.id,
          },
        });
      }
    }
  }

  // MANAGER - All business permissions
  const managerRole = await prisma.role.findUnique({ where: { code: 'MANAGER' } });
  if (managerRole) {
    const managerPermissions = [
      'DOCUMENT_MANAGEMENT',
      'VISA_MANAGEMENT',
      'GUEST_MANAGEMENT',
      'TRANSLATION_MANAGEMENT'
    ];
    for (const permCode of managerPermissions) {
      const permission = await prisma.permission.findUnique({ where: { code: permCode } });
      if (permission) {
        await prisma.rolePermission.upsert({
          where: {
            roleId_permissionId: {
              roleId: managerRole.id,
              permissionId: permission.id,
            },
          },
          update: {},
          create: {
            roleId: managerRole.id,
            permissionId: permission.id,
          },
        });
      }
    }
  }

  // SPECIALIST - Document, Visa, Guest management
  const specialistRole = await prisma.role.findUnique({ where: { code: 'SPECIALIST' } });
  if (specialistRole) {
    const specialistPermissions = [
      'DOCUMENT_MANAGEMENT',
      'VISA_MANAGEMENT',
      'GUEST_MANAGEMENT'
    ];
    for (const permCode of specialistPermissions) {
      const permission = await prisma.permission.findUnique({ where: { code: permCode } });
      if (permission) {
        await prisma.rolePermission.upsert({
          where: {
            roleId_permissionId: {
              roleId: specialistRole.id,
              permissionId: permission.id,
            },
          },
          update: {},
          create: {
            roleId: specialistRole.id,
            permissionId: permission.id,
          },
        });
      }
    }
  }

  // STAFF - Limited permissions (Read + Create only)
  const staffRole = await prisma.role.findUnique({ where: { code: 'STAFF' } });
  if (staffRole) {
    const staffPermissions = ['TRANSLATION_MANAGEMENT'];
    for (const permCode of staffPermissions) {
      const permission = await prisma.permission.findUnique({ where: { code: permCode } });
      if (permission) {
        await prisma.rolePermission.upsert({
          where: {
            roleId_permissionId: {
              roleId: staffRole.id,
              permissionId: permission.id,
            },
          },
          update: {},
          create: {
            roleId: staffRole.id,
            permissionId: permission.id,
          },
        });
      }
    }
  }

  console.log('‚úÖ Assigned permissions to roles');

  // 6. Create Default Unit
  console.log('Creating default unit...');
  const defaultUnit = await prisma.unit.upsert({
    where: { code: 'HTQT' },
    update: {},
    create: {
      name: 'Ph√≤ng H·ª£p t√°c Qu·ªëc t·∫ø',
      code: 'HTQT',
      level: 0,
    },
  });

  // 7. Create System Admin User
  console.log('Creating system admin user...');
  const hashedPassword = await bcrypt.hash('admin123', 12);
  const systemAdmin = await prisma.user.upsert({
    where: { email: 'admin@dntu.edu.vn' },
    update: {},
    create: {
      email: 'admin@dntu.edu.vn',
      password: hashedPassword,
      fullName: 'System Administrator',
      unitId: defaultUnit.id,
      isActive: true,
      isVerified: true,
    },
  });

  // Assign SYSTEM_ADMIN role to admin user
  if (systemAdminRole) {
    await prisma.userRole.upsert({
      where: {
        userId_roleId: {
          userId: systemAdmin.id,
          roleId: systemAdminRole.id,
        },
      },
      update: {},
      create: {
        userId: systemAdmin.id,
        roleId: systemAdminRole.id,
      },
    });
  }

  console.log('‚úÖ Created system admin user');

  // 8. Create Sample Users with Different Roles
  console.log('Creating sample users...');
  
  const sampleUsers = [
    {
      email: 'manager@dntu.edu.vn',
      password: 'manager123',
      fullName: 'Tr∆∞·ªüng ph√≤ng HTQT',
      roleCode: 'MANAGER',
    },
    {
      email: 'specialist@dntu.edu.vn', 
      password: 'specialist123',
      fullName: 'Chuy√™n vi√™n HTQT',
      roleCode: 'SPECIALIST',
    },
    {
      email: 'staff@dntu.edu.vn',
      password: 'staff123', 
      fullName: 'Nh√¢n vi√™n HTQT',
      roleCode: 'STAFF',
    },
    {
      email: 'student@dntu.edu.vn',
      password: 'student123',
      fullName: 'Sinh vi√™n',
      roleCode: 'STUDENT',
    },
  ];

  for (const userData of sampleUsers) {
    const hashedPwd = await bcrypt.hash(userData.password, 12);
    const user = await prisma.user.upsert({
      where: { email: userData.email },
      update: {},
      create: {
        email: userData.email,
        password: hashedPwd,
        fullName: userData.fullName,
        unitId: defaultUnit.id,
        isActive: true,
        isVerified: true,
      },
    });

    const role = await prisma.role.findUnique({ where: { code: userData.roleCode } });
    if (role) {
      await prisma.userRole.upsert({
        where: {
          userId_roleId: {
            userId: user.id,
            roleId: role.id,
          },
        },
        update: {},
        create: {
          userId: user.id,
          roleId: role.id,
        },
      });
    }
  }

  console.log('‚úÖ Created sample users');

  console.log('üéâ RBAC seed completed successfully!');
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error('‚ùå Seed failed:', e);
    await prisma.$disconnect();
    process.exit(1);
  });