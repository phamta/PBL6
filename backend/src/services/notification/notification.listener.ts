import { Injectable, Logger } from '@nestjs/common';
import { OnEvent } from '@nestjs/event-emitter';
import { NotificationService } from './notification.service';
import { NotificationType } from '@prisma/client';

interface SystemUser {
  id: string;
  actions: string[];
  fullName: string;
  email: string;
}

interface DocumentEvent {
  document: {
    id: string;
    title: string;
    expiryDate?: Date;
    createdBy: {
      id: string;
      fullName: string;
      email: string;
    };
  };
  user: SystemUser;
}

interface VisaEvent {
  visa: {
    id: string;
    passportNumber: string;
    holderName: string;
    expiryDate: Date;
    holderEmail?: string;
    createdBy: {
      id: string;
      fullName: string;
      email: string;
    };
  };
  user: SystemUser;
}

interface TranslationEvent {
  translation: {
    id: string;
    applicantName: string;
    applicantEmail: string;
    documentTitle: string;
    status: string;
  };
  user: SystemUser;
}

interface GuestEvent {
  guest: {
    id: string;
    fullName: string;
    email?: string;
    organization?: string;
    visitDate: Date;
    createdBy: {
      id: string;
      fullName: string;
      email: string;
    };
  };
  user: SystemUser;
}

/**
 * NotificationListener - L·∫Øng nghe events v√† g·ª≠i notification t·ª± ƒë·ªông
 * 
 * Events ƒë∆∞·ª£c x·ª≠ l√Ω:
 * - document.created ‚Üí th√¥ng b√°o cho Department Officer
 * - document.expiring ‚Üí email reminder cho creator
 * - visa.created ‚Üí th√¥ng b√°o cho Department Officer
 * - visa.expiring ‚Üí email reminder cho visa holder v√† creator
 * - translation.completed ‚Üí email cho applicant
 * - guest.created ‚Üí th√¥ng b√°o cho Department Officer
 * - guest.visit_reminder ‚Üí email reminder tr∆∞·ªõc ng√†y visit
 */
@Injectable()
export class NotificationListener {
  private readonly logger = new Logger(NotificationListener.name);

  // System user for sending automated notifications
  private readonly systemUser: SystemUser = {
    id: 'system',
    actions: ['notification:send'],
    fullName: 'H·ªá th·ªëng',
    email: 'system@pbl6.edu.vn',
  };

  constructor(private readonly notificationService: NotificationService) {}

  // ==================== DOCUMENT EVENTS ====================

  /**
   * X·ª≠ l√Ω khi document ƒë∆∞·ª£c t·∫°o m·ªõi
   */
  @OnEvent('document.created')
  async handleDocumentCreated(event: DocumentEvent) {
    this.logger.log(`üìÑ Document created: ${event.document.title} by ${event.user.fullName}`);

    try {
      // G·ª≠i system notification cho Department Officers
      // (Gi·∫£ ƒë·ªãnh c√≥ role ho·∫∑c t√¨m users c√≥ permission document:approve)
      await this.notificationService.sendNotification({
        type: NotificationType.SYSTEM,
        recipient: 'department-officers', // TODO: Thay b·∫±ng logic t√¨m department officers
        subject: 'T√†i li·ªáu m·ªõi c·∫ßn duy·ªát',
        content: `T√†i li·ªáu "${event.document.title}" v·ª´a ƒë∆∞·ª£c t·∫°o b·ªüi ${event.user.fullName} v√† ƒëang ch·ªù duy·ªát.`,
      }, this.systemUser);

      this.logger.log(`‚úÖ Notification sent for document creation: ${event.document.id}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send document created notification: ${error.message}`, error.stack);
    }
  }

  /**
   * X·ª≠ l√Ω khi document s·∫Øp h·∫øt h·∫°n
   */
  @OnEvent('document.expiring')
  async handleDocumentExpiring(event: DocumentEvent) {
    this.logger.log(`‚è∞ Document expiring: ${event.document.title}, expires: ${event.document.expiryDate}`);

    if (!event.document.expiryDate) {
      this.logger.warn(`Document ${event.document.id} has no expiry date, skipping notification`);
      return;
    }

    try {
      // G·ª≠i email reminder cho creator
      await this.notificationService.sendNotification({
        type: NotificationType.EMAIL,
        recipient: event.document.createdBy.email,
        subject: `Nh·∫Øc nh·ªü: T√†i li·ªáu "${event.document.title}" s·∫Øp h·∫øt h·∫°n`,
        content: `Xin ch√†o ${event.document.createdBy.fullName},

T√†i li·ªáu "${event.document.title}" c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n v√†o ng√†y ${event.document.expiryDate.toLocaleDateString('vi-VN')}.

Vui l√≤ng ki·ªÉm tra v√† gia h·∫°n t√†i li·ªáu n·∫øu c·∫ßn thi·∫øt.

Tr√¢n tr·ªçng,
H·ªá th·ªëng qu·∫£n l√Ω HTQT`,
        variables: {
          fullName: event.document.createdBy.fullName,
          documentTitle: event.document.title,
          expiryDate: event.document.expiryDate.toLocaleDateString('vi-VN'),
        }
      }, this.systemUser);

      this.logger.log(`‚úÖ Document expiring notification sent to: ${event.document.createdBy.email}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send document expiring notification: ${error.message}`, error.stack);
    }
  }

  // ==================== VISA EVENTS ====================

  /**
   * X·ª≠ l√Ω khi visa ƒë∆∞·ª£c t·∫°o m·ªõi
   */
  @OnEvent('visa.created')
  async handleVisaCreated(event: VisaEvent) {
    this.logger.log(`üõÇ Visa created: ${event.visa.passportNumber} for ${event.visa.holderName}`);

    try {
      // G·ª≠i system notification cho Department Officers
      await this.notificationService.sendNotification({
        type: NotificationType.SYSTEM,
        recipient: 'department-officers', // TODO: Thay b·∫±ng logic t√¨m department officers
        subject: 'Visa application m·ªõi',
        content: `Visa application cho ${event.visa.holderName} (Passport: ${event.visa.passportNumber}) v·ª´a ƒë∆∞·ª£c t·∫°o b·ªüi ${event.user.fullName}.`,
      }, this.systemUser);

      this.logger.log(`‚úÖ Notification sent for visa creation: ${event.visa.id}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send visa created notification: ${error.message}`, error.stack);
    }
  }

  /**
   * X·ª≠ l√Ω khi visa s·∫Øp h·∫øt h·∫°n
   */
  @OnEvent('visa.expiring')
  async handleVisaExpiring(event: VisaEvent) {
    this.logger.log(`‚è∞ Visa expiring: ${event.visa.passportNumber}, expires: ${event.visa.expiryDate}`);

    try {
      // G·ª≠i email cho visa holder (n·∫øu c√≥ email)
      if (event.visa.holderEmail) {
        await this.notificationService.sendNotification({
          type: NotificationType.EMAIL,
          recipient: event.visa.holderEmail,
          subject: `Visa Expiry Reminder - Nh·∫Øc nh·ªü h·∫øt h·∫°n visa`,
          content: `Dear ${event.visa.holderName} / K√≠nh g·ª≠i ${event.visa.holderName},

Your visa (Passport: ${event.visa.passportNumber}) will expire on ${event.visa.expiryDate.toLocaleDateString('en-US')}.
Visa c·ªßa b·∫°n (H·ªô chi·∫øu: ${event.visa.passportNumber}) s·∫Ω h·∫øt h·∫°n v√†o ng√†y ${event.visa.expiryDate.toLocaleDateString('vi-VN')}.

Please contact the International Relations Office for visa extension if needed.
Vui l√≤ng li√™n h·ªá Ph√≤ng Quan h·ªá Qu·ªëc t·∫ø ƒë·ªÉ gia h·∫°n visa n·∫øu c·∫ßn thi·∫øt.

Best regards / Tr√¢n tr·ªçng,
International Relations Office / Ph√≤ng Quan h·ªá Qu·ªëc t·∫ø`,
        }, this.systemUser);
      }

      // G·ª≠i email cho creator
      await this.notificationService.sendNotification({
        type: NotificationType.EMAIL,
        recipient: event.visa.createdBy.email,
        subject: `Nh·∫Øc nh·ªü: Visa ${event.visa.passportNumber} s·∫Øp h·∫øt h·∫°n`,
        content: `Xin ch√†o ${event.visa.createdBy.fullName},

Visa cho ${event.visa.holderName} (Passport: ${event.visa.passportNumber}) s·∫Ω h·∫øt h·∫°n v√†o ng√†y ${event.visa.expiryDate.toLocaleDateString('vi-VN')}.

Vui l√≤ng li√™n h·ªá v·ªõi visa holder ƒë·ªÉ th·ª±c hi·ªán c√°c th·ªß t·ª•c gia h·∫°n n·∫øu c·∫ßn thi·∫øt.

Tr√¢n tr·ªçng,
H·ªá th·ªëng qu·∫£n l√Ω HTQT`,
      }, this.systemUser);

      this.logger.log(`‚úÖ Visa expiring notifications sent for: ${event.visa.passportNumber}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send visa expiring notification: ${error.message}`, error.stack);
    }
  }

  // ==================== TRANSLATION EVENTS ====================

  /**
   * X·ª≠ l√Ω khi translation ƒë∆∞·ª£c ho√†n th√†nh
   */
  @OnEvent('translation.completed')
  async handleTranslationCompleted(event: TranslationEvent) {
    this.logger.log(`üìù Translation completed: ${event.translation.documentTitle} for ${event.translation.applicantName}`);

    try {
      // G·ª≠i email th√¥ng b√°o ho√†n th√†nh cho applicant
      await this.notificationService.sendNotification({
        type: NotificationType.EMAIL,
        recipient: event.translation.applicantEmail,
        subject: `Ho√†n th√†nh d·ªãch thu·∫≠t - ${event.translation.documentTitle}`,
        content: `Xin ch√†o ${event.translation.applicantName},

Y√™u c·∫ßu d·ªãch thu·∫≠t t√†i li·ªáu "${event.translation.documentTitle}" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh th√†nh c√¥ng.

M√£ y√™u c·∫ßu: ${event.translation.id}
T√†i li·ªáu: ${event.translation.documentTitle}
Tr·∫°ng th√°i: ƒê√£ ho√†n th√†nh

Vui l√≤ng li√™n h·ªá Ph√≤ng Quan h·ªá Qu·ªëc t·∫ø ƒë·ªÉ nh·∫≠n t√†i li·ªáu ƒë√£ d·ªãch v√† c√¥ng ch·ª©ng.

Th√¥ng tin li√™n h·ªá:
- Email: htqt@university.edu.vn
- ƒêi·ªán tho·∫°i: (028) 1234 5678

Tr√¢n tr·ªçng,
Ph√≤ng Quan h·ªá Qu·ªëc t·∫ø`,
        variables: {
          applicantName: event.translation.applicantName,
          documentTitle: event.translation.documentTitle,
          requestId: event.translation.id,
        }
      }, this.systemUser);

      // G·ª≠i system notification cho staff
      await this.notificationService.sendNotification({
        type: NotificationType.SYSTEM,
        recipient: event.user.id,
        subject: 'Translation ƒë√£ ho√†n th√†nh',
        content: `ƒê√£ g·ª≠i th√¥ng b√°o ho√†n th√†nh translation "${event.translation.documentTitle}" cho ${event.translation.applicantName}.`,
      }, this.systemUser);

      this.logger.log(`‚úÖ Translation completion notifications sent for: ${event.translation.id}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send translation completed notification: ${error.message}`, error.stack);
    }
  }

  /**
   * X·ª≠ l√Ω khi translation ƒë∆∞·ª£c approve
   */
  @OnEvent('translation.approved')
  async handleTranslationApproved(event: TranslationEvent) {
    this.logger.log(`‚úÖ Translation approved: ${event.translation.documentTitle}`);

    try {
      // G·ª≠i email th√¥ng b√°o approve cho applicant
      await this.notificationService.sendNotification({
        type: NotificationType.EMAIL,
        recipient: event.translation.applicantEmail,
        subject: `ƒê√£ duy·ªát y√™u c·∫ßu d·ªãch thu·∫≠t - ${event.translation.documentTitle}`,
        content: `Xin ch√†o ${event.translation.applicantName},

Y√™u c·∫ßu d·ªãch thu·∫≠t t√†i li·ªáu "${event.translation.documentTitle}" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† ƒëang trong qu√° tr√¨nh x·ª≠ l√Ω.

M√£ y√™u c·∫ßu: ${event.translation.id}
Tr·∫°ng th√°i: ƒê√£ duy·ªát

Ch√∫ng t√¥i s·∫Ω th√¥ng b√°o khi qu√° tr√¨nh d·ªãch thu·∫≠t ho√†n t·∫•t.

Tr√¢n tr·ªçng,
Ph√≤ng Quan h·ªá Qu·ªëc t·∫ø`,
      }, this.systemUser);

      this.logger.log(`‚úÖ Translation approval notification sent to: ${event.translation.applicantEmail}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send translation approved notification: ${error.message}`, error.stack);
    }
  }

  // ==================== GUEST EVENTS ====================

  /**
   * X·ª≠ l√Ω khi guest ƒë∆∞·ª£c ƒëƒÉng k√Ω
   */
  @OnEvent('guest.created')
  async handleGuestCreated(event: GuestEvent) {
    this.logger.log(`üéì Guest registered: ${event.guest.fullName} from ${event.guest.organization}`);

    try {
      // G·ª≠i system notification cho Department Officers
      await this.notificationService.sendNotification({
        type: NotificationType.SYSTEM,
        recipient: 'department-officers', // TODO: Thay b·∫±ng logic t√¨m department officers
        subject: 'Kh√°ch qu·ªëc t·∫ø m·ªõi ƒëƒÉng k√Ω',
        content: `Kh√°ch qu·ªëc t·∫ø ${event.guest.fullName} t·ª´ ${event.guest.organization || 'N/A'} ƒë√£ ƒëƒÉng k√Ω gh√© thƒÉm v√†o ng√†y ${event.guest.visitDate.toLocaleDateString('vi-VN')}.`,
      }, this.systemUser);

      // G·ª≠i email confirmation cho guest (n·∫øu c√≥ email)
      if (event.guest.email) {
        await this.notificationService.sendNotification({
          type: NotificationType.EMAIL,
          recipient: event.guest.email,
          subject: 'X√°c nh·∫≠n ƒëƒÉng k√Ω thƒÉm quan / Visit Registration Confirmation',
          content: `Dear ${event.guest.fullName} / K√≠nh g·ª≠i ${event.guest.fullName},

Thank you for registering your visit to our university.
C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω thƒÉm quan tr∆∞·ªùng ƒë·∫°i h·ªçc c·ªßa ch√∫ng t√¥i.

Visit Details / Th√¥ng tin chuy·∫øn thƒÉm:
- Date / Ng√†y: ${event.guest.visitDate.toLocaleDateString('en-US')} / ${event.guest.visitDate.toLocaleDateString('vi-VN')}
- Organization / T·ªï ch·ª©c: ${event.guest.organization || 'N/A'}

We will contact you soon with more details.
Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm ƒë·ªÉ cung c·∫•p th√™m th√¥ng tin chi ti·∫øt.

Best regards / Tr√¢n tr·ªçng,
International Relations Office / Ph√≤ng Quan h·ªá Qu·ªëc t·∫ø`,
        }, this.systemUser);
      }

      this.logger.log(`‚úÖ Guest registration notifications sent for: ${event.guest.id}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send guest created notification: ${error.message}`, error.stack);
    }
  }

  /**
   * X·ª≠ l√Ω reminder tr∆∞·ªõc ng√†y guest visit
   */
  @OnEvent('guest.visit_reminder')
  async handleGuestVisitReminder(event: GuestEvent) {
    this.logger.log(`‚è∞ Guest visit reminder: ${event.guest.fullName} visiting tomorrow`);

    try {
      // G·ª≠i reminder cho staff ph·ª• tr√°ch
      await this.notificationService.sendNotification({
        type: NotificationType.SYSTEM,
        recipient: event.guest.createdBy.id,
        subject: 'Nh·∫Øc nh·ªü: Kh√°ch qu·ªëc t·∫ø gh√© thƒÉm ng√†y mai',
        content: `Kh√°ch qu·ªëc t·∫ø ${event.guest.fullName} t·ª´ ${event.guest.organization || 'N/A'} s·∫Ω gh√© thƒÉm v√†o ng√†y mai (${event.guest.visitDate.toLocaleDateString('vi-VN')}). Vui l√≤ng chu·∫©n b·ªã ƒë√≥n ti·∫øp.`,
      }, this.systemUser);

      // G·ª≠i reminder email cho guest
      if (event.guest.email) {
        await this.notificationService.sendNotification({
          type: NotificationType.EMAIL,
          recipient: event.guest.email,
          subject: 'Visit Reminder / Nh·∫Øc nh·ªü chuy·∫øn thƒÉm',
          content: `Dear ${event.guest.fullName} / K√≠nh g·ª≠i ${event.guest.fullName},

This is a reminder that your visit to our university is scheduled for tomorrow.
ƒê√¢y l√† l·ªùi nh·∫Øc r·∫±ng chuy·∫øn thƒÉm c·ªßa b·∫°n ƒë·∫øn tr∆∞·ªùng ƒë·∫°i h·ªçc ƒë∆∞·ª£c l√™n l·ªãch v√†o ng√†y mai.

Visit Date / Ng√†y thƒÉm: ${event.guest.visitDate.toLocaleDateString('en-US')} / ${event.guest.visitDate.toLocaleDateString('vi-VN')}

Please contact us if you have any questions.
Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o.

Contact / Li√™n h·ªá:
- Email: htqt@university.edu.vn
- Phone / SƒêT: (028) 1234 5678

Best regards / Tr√¢n tr·ªçng,
International Relations Office / Ph√≤ng Quan h·ªá Qu·ªëc t·∫ø`,
        }, this.systemUser);
      }

      this.logger.log(`‚úÖ Guest visit reminder sent for: ${event.guest.id}`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send guest visit reminder: ${error.message}`, error.stack);
    }
  }

  // ==================== SYSTEM EVENTS ====================

  /**
   * X·ª≠ l√Ω khi system config thay ƒë·ªïi
   */
  @OnEvent('system.config.updated')
  async handleSystemConfigUpdated(event: { key: string; value: string; user: SystemUser }) {
    this.logger.log(`‚öôÔ∏è System config updated: ${event.key} = ${event.value}`);

    try {
      // G·ª≠i notification cho system administrators
      await this.notificationService.sendNotification({
        type: NotificationType.SYSTEM,
        recipient: 'system-admins', // TODO: Thay b·∫±ng logic t√¨m system admins
        subject: 'C·∫•u h√¨nh h·ªá th·ªëng ƒë√£ thay ƒë·ªïi',
        content: `C·∫•u h√¨nh "${event.key}" ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh "${event.value}" b·ªüi ${event.user.fullName}.`,
      }, this.systemUser);

      this.logger.log(`‚úÖ System config update notification sent`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send system config notification: ${error.message}`, error.stack);
    }
  }

  /**
   * X·ª≠ l√Ω error events ƒë·ªÉ g·ª≠i c·∫£nh b√°o
   */
  @OnEvent('system.error')
  async handleSystemError(event: { error: string; context: string; user?: SystemUser }) {
    this.logger.error(`üö® System error occurred: ${event.error} in ${event.context}`);

    try {
      // G·ª≠i error alert cho system administrators
      await this.notificationService.sendNotification({
        type: NotificationType.SYSTEM,
        recipient: 'system-admins', // TODO: Thay b·∫±ng logic t√¨m system admins
        subject: '‚ö†Ô∏è L·ªói h·ªá th·ªëng',
        content: `ƒê√£ x·∫£y ra l·ªói trong h·ªá th·ªëng:
        
Context: ${event.context}
Error: ${event.error}
Time: ${new Date().toLocaleString('vi-VN')}
User: ${event.user?.fullName || 'Unknown'}`,
      }, this.systemUser);

      this.logger.log(`‚úÖ System error notification sent`);
    } catch (error) {
      this.logger.error(`‚ùå Failed to send system error notification: ${error.message}`, error.stack);
    }
  }
}