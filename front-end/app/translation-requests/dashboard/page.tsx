'use client';

import { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { translationRequestAPI } from '@/lib/api/translation-request';
import { TranslationRequestStatistics } from '@/lib/types/translation-request';
import Link from 'next/link';

export default function TranslationDashboardPage() {
  const [statistics, setStatistics] = useState<TranslationRequestStatistics>({
    total: 0,
    pending: 0,
    underReview: 0,
    approved: 0,
    rejected: 0,
    needsRevision: 0,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // In a real app, this would come from authentication context
  const userRole = 'KHCN_DN'; // or 'USER'

  const fetchStatistics = async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await translationRequestAPI.getStatistics();
      setStatistics(response);
    } catch (error) {
      console.error('Error fetching statistics:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin th·ªëng k√™');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchStatistics();
  }, []);

  const statisticsCards = [
    {
      title: 'T·ªïng s·ªë y√™u c·∫ßu',
      value: statistics.total,
      color: 'text-blue-600',
      bgColor: 'bg-blue-50',
      icon: 'üìä',
    },
    {
      title: 'Ch·ªù x·ª≠ l√Ω',
      value: statistics.pending,
      color: 'text-yellow-600',
      bgColor: 'bg-yellow-50',
      icon: '‚è≥',
    },
    {
      title: 'ƒêang xem x√©t',
      value: statistics.underReview,
      color: 'text-orange-600',
      bgColor: 'bg-orange-50',
      icon: 'üëÄ',
    },
    {
      title: 'ƒê√£ duy·ªát',
      value: statistics.approved,
      color: 'text-green-600',
      bgColor: 'bg-green-50',
      icon: '‚úÖ',
    },
    {
      title: 'T·ª´ ch·ªëi',
      value: statistics.rejected,
      color: 'text-red-600',
      bgColor: 'bg-red-50',
      icon: '‚ùå',
    },
    {
      title: 'C·∫ßn ch·ªânh s·ª≠a',
      value: statistics.needsRevision,
      color: 'text-purple-600',
      bgColor: 'bg-purple-50',
      icon: '‚úèÔ∏è',
    },
  ];

  const quickActions = [
    {
      title: 'T·∫°o y√™u c·∫ßu m·ªõi',
      description: 'T·∫°o y√™u c·∫ßu x√°c nh·∫≠n b·∫£n d·ªãch m·ªõi',
      href: '/translation-requests',
      icon: '‚ûï',
      color: 'bg-blue-500 hover:bg-blue-600',
    },
    {
      title: 'Xem t·∫•t c·∫£ y√™u c·∫ßu',
      description: 'Xem danh s√°ch t·∫•t c·∫£ y√™u c·∫ßu',
      href: '/translation-requests',
      icon: 'üìã',
      color: 'bg-green-500 hover:bg-green-600',
    },
    {
      title: 'T·∫°o b√°o c√°o',
      description: 'T·∫°o b√°o c√°o th·ªëng k√™ v√† xu·∫•t d·ªØ li·ªáu',
      href: '/translation-requests/reports',
      icon: 'üìà',
      color: 'bg-purple-500 hover:bg-purple-600',
    },
  ];

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Page Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold">Dashboard X√°c Nh·∫≠n B·∫£n D·ªãch</h1>
        <p className="text-gray-600 mt-2">
          T·ªïng quan v·ªÅ h·ªá th·ªëng qu·∫£n l√Ω y√™u c·∫ßu x√°c nh·∫≠n b·∫£n d·ªãch
        </p>
      </div>

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 mb-8">
        {loading ? (
          Array.from({ length: 6 }).map((_, index) => (
            <Card key={index}>
              <CardContent className="p-6">
                <div className="animate-pulse">
                  <div className="h-4 bg-gray-200 rounded mb-2"></div>
                  <div className="h-8 bg-gray-200 rounded"></div>
                </div>
              </CardContent>
            </Card>
          ))
        ) : error ? (
          <Card className="col-span-full">
            <CardContent className="p-6">
              <div className="text-center text-red-600">{error}</div>
            </CardContent>
          </Card>
        ) : (
          statisticsCards.map((stat, index) => (
            <Card key={index} className={`${stat.bgColor} border-l-4 border-l-gray-300`}>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600 mb-1">
                      {stat.title}
                    </p>
                    <p className={`text-2xl font-bold ${stat.color}`}>
                      {stat.value}
                    </p>
                  </div>
                  <div className="text-2xl">{stat.icon}</div>
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>

      {/* Quick Actions */}
      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Thao t√°c nhanh</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {quickActions.map((action, index) => (
              <Link key={index} href={action.href}>
                <Card className="hover:shadow-md transition-shadow cursor-pointer h-full">
                  <CardContent className="p-6">
                    <div className="flex items-start space-x-4">
                      <div className={`p-3 rounded-lg ${action.color} text-white text-xl`}>
                        {action.icon}
                      </div>
                      <div className="flex-1">
                        <h3 className="font-semibold text-lg mb-2">{action.title}</h3>
                        <p className="text-gray-600 text-sm">{action.description}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Recent Activity or Additional Info */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* System Information */}
        <Card>
          <CardHeader>
            <CardTitle>Th√¥ng tin h·ªá th·ªëng</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Vai tr√≤ hi·ªán t·∫°i:</span>
                <span className="font-medium">
                  {userRole === 'KHCN_DN' ? 'Qu·∫£n tr·ªã vi√™n KHCN&ƒêN' : 'Ng∆∞·ªùi d√πng'}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Ng√†y c·∫≠p nh·∫≠t:</span>
                <span className="font-medium">
                  {new Date().toLocaleDateString('vi-VN')}
                </span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Tr·∫°ng th√°i h·ªá th·ªëng:</span>
                <span className="font-medium text-green-600">Ho·∫°t ƒë·ªông</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Help & Support */}
        <Card>
          <CardHeader>
            <CardTitle>H·ªó tr·ª£</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <h4 className="font-medium mb-2">H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h4>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ T·∫°o y√™u c·∫ßu x√°c nh·∫≠n b·∫£n d·ªãch m·ªõi</li>
                  <li>‚Ä¢ Theo d√µi tr·∫°ng th√°i y√™u c·∫ßu</li>
                  <li>‚Ä¢ T·∫£i xu·ªëng t√†i li·ªáu v√† gi·∫•y x√°c nh·∫≠n</li>
                  <li>‚Ä¢ T·∫°o b√°o c√°o th·ªëng k√™</li>
                </ul>
              </div>
              <div className="pt-4">
                <Button variant="outline" className="w-full">
                  Xem h∆∞·ªõng d·∫´n chi ti·∫øt
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
